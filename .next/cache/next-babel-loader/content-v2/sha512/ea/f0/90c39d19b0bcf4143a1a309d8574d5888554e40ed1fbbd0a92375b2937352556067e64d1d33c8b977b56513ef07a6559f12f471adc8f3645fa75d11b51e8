{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nlet store;\nconst exampleInitialState = {\n  mode: 'day',\n  lang: 'en'\n};\nexport const actionTypes = {\n  DAY: 'DAY',\n  NIGHT: 'NIGHT',\n  EN: 'EN',\n  ZHHANT: 'ZHHANT',\n  RESET: 'RESET'\n}; // REDUCERS\n\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.DAY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day'\n      });\n\n    case actionTypes.NIGHT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'night'\n      });\n\n    case actionTypes.EN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: 'en'\n      });\n\n    case actionTypes.ZHHANT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: 'zhHant'\n      });\n\n    case actionTypes.RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day',\n        lang: 'en'\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport const toDay = () => {\n  return {\n    type: actionTypes.DAY\n  };\n};\nexport const toNight = () => {\n  return {\n    type: actionTypes.NIGHT\n  };\n};\nexport const toEn = () => {\n  return {\n    type: actionTypes.EN\n  };\n};\nexport const toZhHant = () => {\n  return {\n    type: actionTypes.ZHHANT\n  };\n};\nexport const resetCount = () => {\n  return {\n    type: actionTypes.RESET\n  };\n};\nconst persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['mode', 'lang'] // place to select which state you want to persist\n\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nfunction makeStore(initialState = exampleInitialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n} // import { useMemo } from 'react'\n// import { createStore, applyMiddleware } from 'redux'\n// import { composeWithDevTools } from 'redux-devtools-extension'\n// let store\n// const initialState = {\n//     mode:'day'\n// }\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'DAY':\n//       return {\n//         ...state,\n//         mode: 'day',\n//       }\n//     case 'NIGHT':\n//       return {\n//         ...state,\n//         mode: 'night',\n//       }\n//     case 'RESET':\n//       return {\n//         ...state,\n//       }\n//     default:\n//       return state\n//   }\n// }\n// function initStore(preloadedState = initialState) {\n//   return createStore(\n//     reducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware())\n//   )\n// }\n// export const initializeStore = (preloadedState) => {\n//   let _store = store ?? initStore(preloadedState)\n//   // After navigating to a page with an initial Redux state, merge that state\n//   // with the current state in the store, and create a new store\n//   if (preloadedState && store) {\n//     _store = initStore({\n//       ...store.getState(),\n//       ...preloadedState,\n//     })\n//     // Reset the current store\n//     store = undefined\n//   }\n//   // For SSG and SSR always create a new store\n//   if (typeof window === 'undefined') return _store\n//   // Create the store once in the client\n//   if (!store) store = _store\n//   return _store\n// }\n// export function useStore(initialState) {\n//   const store = useMemo(() => initializeStore(initialState), [initialState])\n//   return store\n// }","map":null,"metadata":{},"sourceType":"module"}